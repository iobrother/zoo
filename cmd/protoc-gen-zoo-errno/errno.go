package main

import (
	"fmt"
	"os"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/pluginpb"

	"github.com/iobrother/zoo/proto/errdesc"
)

const (
	fmtPackage    = protogen.GoImportPath("fmt")
	errorsPackage = protogen.GoImportPath("github.com/iobrother/zoo/core/errors")
)

func run(gen *protogen.Plugin) error {
	gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
	for _, f := range gen.Files {
		if !f.Generate {
			continue
		}
		generateFile(gen, f)
	}
	return nil
}

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Enums) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_error.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	generateHeader(gen, file, g)
	generateImports(g)
	generateFileContent(file, g)
	return g
}

func generateHeader(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	g.P("// Code generated by protoc-gen-zoo-errno. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-zoo-errno v", version)
	g.P("// - protoc                  ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
}

func generateImports(g *protogen.GeneratedFile) {
	g.P("// Reference imports to suppress errors if they are not otherwise used.")
	g.P("var _ = ", fmtPackage.Ident("Errorf"))
	g.P("var _ = ", errorsPackage.Ident("New"))
	g.P()
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

// generateFileContent generates the errors definitions, excluding the package statement.
func generateFileContent(file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Enums) == 0 {
		return
	}

	index := 0
	for _, enum := range file.Enums {
		skip := genErrorsDetail(g, enum)
		if !skip {
			index++
		}
	}
	// If all enums do not contain 'errors.code', the current file is skipped
	if index == 0 {
		g.Skip()
	}
}

func genErrorsDetail(g *protogen.GeneratedFile, enum *protogen.Enum) bool {
	defaultCode := proto.GetExtension(enum.Desc.Options(), errdesc.E_DefaultCode)
	code := 0
	if ok := defaultCode.(int32); ok != 0 {
		code = int(ok)
	}
	var ew errorWrapper
	for _, v := range enum.Values {
		enumCode := code
		eCode := proto.GetExtension(v.Desc.Options(), errdesc.E_Code)
		if vv, ok := eCode.(int32); ok && vv != 0 {
			enumCode = int(vv)
		}
		if enumCode == 0 {
			continue
		}
		msg := ""
		eMsg := proto.GetExtension(v.Desc.Options(), errdesc.E_Msg)
		if vv, ok := eMsg.(string); ok {
			msg = vv
		}

		err := &errorInfo{
			Name:       string(enum.Desc.Name()),
			Code:       enumCode,
			Value:      string(v.Desc.Name()),
			CamelValue: camelCase(string(v.Desc.Name())),
			Message:    msg,
		}
		ew.Errors = append(ew.Errors, err)
	}
	if len(ew.Errors) == 0 {
		return true
	}
	err := ew.execute(g)
	if err != nil {
		_, _ = fmt.Fprintf(os.Stderr,
			"\u001B[31mWARN\u001B[m: execute template failed.\n")
	}
	return false
}

func camelCase(s string) string {
	var b []byte
	capNext := true
	for i := 0; i < len(s); i++ {
		c := s[i]
		if c == '_' {
			capNext = true
			continue
		}

		if capNext && isASCIILower(c) {
			c -= 'a' - 'A' // convert to uppercase
		}
		if !capNext && isASCIIUpper(c) {
			c += 'a' - 'A' // convert to lowercase
		}

		b = append(b, c)
		capNext = false
	}
	return string(b)
}

func isASCIILower(c byte) bool {
	return 'a' <= c && c <= 'z'
}

func isASCIIUpper(c byte) bool {
	return 'A' <= c && c <= 'Z'
}
