// Code generated by protoc-gen-rpcx. DO NOT EDIT.
// versions:
// - protoc-gen-rpcx v0.3.0
// - protoc          (unknown)
// source: example/example.proto

package example

import (
	context "context"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.TODO
var _ = client.NewClient
var _ = protocol.NewMessage

// ================== interface skeleton ===================
type ExampleAble interface {
	// ExampleAble can be used for interface verification.

	// Login is server rpc method as defined
	Login(ctx context.Context, args *LoginReq, reply *LoginRsp) (err error)

	// Sms is server rpc method as defined
	Sms(ctx context.Context, args *SmsReq, reply *SmsRsp) (err error)
}

// ================== client stub ===================
// Example is a client wrapped XClient.
type ExampleClient struct {
	xclient client.XClient
}

// NewExampleClient wraps a XClient as ExampleClient.
// You can pass a shared XClient object created by NewXClientForExample.
func NewExampleClient(xclient client.XClient) *ExampleClient {
	return &ExampleClient{xclient: xclient}
}

// NewXClientForExample creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForExample(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("Example", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// Login is client rpc method as defined
func (c *ExampleClient) Login(ctx context.Context, args *LoginReq) (reply *LoginRsp, err error) {
	reply = &LoginRsp{}
	err = c.xclient.Call(ctx, "Login", args, reply)
	return reply, err
}

// Sms is client rpc method as defined
func (c *ExampleClient) Sms(ctx context.Context, args *SmsReq) (reply *SmsRsp, err error) {
	reply = &SmsRsp{}
	err = c.xclient.Call(ctx, "Sms", args, reply)
	return reply, err
}

// ================== oneclient stub ===================
// ExampleOneClient is a client wrapped oneClient.
type ExampleOneClient struct {
	serviceName string
	oneclient   *client.OneClient
}

// NewExampleOneClient wraps a OneClient as ExampleOneClient.
// You can pass a shared OneClient object created by NewOneClientForExample.
func NewExampleOneClient(oneclient *client.OneClient) *ExampleOneClient {
	return &ExampleOneClient{
		serviceName: "Example",
		oneclient:   oneclient,
	}
}

// ======================================================

// Login is client rpc method as defined
func (c *ExampleOneClient) Login(ctx context.Context, args *LoginReq) (reply *LoginRsp, err error) {
	reply = &LoginRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Login", args, reply)
	return reply, err
}

// Sms is client rpc method as defined
func (c *ExampleOneClient) Sms(ctx context.Context, args *SmsReq) (reply *SmsRsp, err error) {
	reply = &SmsRsp{}
	err = c.oneclient.Call(ctx, c.serviceName, "Sms", args, reply)
	return reply, err
}
